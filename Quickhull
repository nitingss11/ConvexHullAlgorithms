#include<iostream>
#include<algorithm>
#include<vector>
#include<cmath>
#include <cstdlib> 
#include<string>
#include<fstream>
#include<ctime>

using namespace std;

class point
{
   private:
        int _x; 
        int _y;  
   
   public:
        point(int x, int y)
        { 
            _x = x;
            _y = y;
          }
        
        int getX()
        { 
            return _x;
         }
        
        int getY()
        {
            return _y;
         }
 };

bool comp(point *a, point *b){  
    
    return (a->getX()<b->getX());
}

int determinant(point *p1, point *p2, point *p3){  
    
    int d = p1->getX() * p2->getY() + p3->getX() * p1->getY() + p2->getX() * p3->getY();
    d -= (p3->getX() * p2->getY() + p2->getX() * p1->getY() + p1->getX() * p3->getY());
    return d;
}

void findPartialHull(vector<point*> &arr, vector<point*> &result, point* p1, point* pn){
  
  vector<point*> s1 = vector<point*>();  
   
  for (vector<point*>::iterator it = arr.begin(); it < arr.end(); it++){  
    if (determinant(p1,pn,*it) > 0)
      {   
            s1.push_back(*it);  
        }
      }
    
    if (s1.empty()){    
        result.push_back(p1);
    } else {   
       
        float maxDist = 0; 
        point *pmax;   
        float dist; 
        float length = sqrt(pow(p1->getX() - pn->getX(), 2) + pow(p1->getY() - pn->getY(), 2)); 
        for (vector<point*>::iterator it = s1.begin(); it < s1.end(); it++){
            dist = determinant(p1,pn,*it) / length; 
            if (dist > maxDist){   
                maxDist = dist;
                pmax = *it;
            }
        }
      
        vector<point*> s11 = vector<point*>(); 
        vector<point*> s12 = vector<point*>();  
        for (vector<point*>::iterator it = s1.begin(); it < s1.end(); it++){
           
            if (determinant(p1,pmax,*it) > 0){ 
                s11.push_back(*it);
            } else if (determinant(pmax,pn,*it) > 0){   
                s12.push_back(*it);
            }
        }
        findPartialHull(s11, result, p1, pmax); 
        findPartialHull(s12, result, pmax, pn); 
    }
}

int main()
 {
    string filename;    
    ifstream fi;    
    int N; 
    
    vector<point*> parray = vector<point*>();   
    vector<point*> upper = vector<point*>();    
    vector<point*> lower = vector<point*>();   
    
   cout << "Please enter the number of points : "<<endl;
   cin>>N;
   
    int check;
	 
    cout<<"Enter\n 1 (to check for random points) \n 2 (to enter the points yourself)\n";
	 cin>>check;
	 
      if(check==1)  {
	   	 for (int i = 0; i < N; i++){  
        int x, y;
        x=rand() %500 + (-250);
        y=rand() %500 + (-250);
        point *p = new point(x,y);
        parray.push_back(p);
         } 
	    }  
	  
      if(check==2){
	      for (int i = 0; i < N; i++){  
        int x, y;
        cin>> x;
        cin>> y;
        point *p = new point(x,y);
        parray.push_back(p);
         } 
       }   	
	    
    float t0 = clock(); 
    sort(parray.begin(),parray.end(),comp);
   
    findPartialHull(parray, upper, parray[0], parray[N-1]);   
    findPartialHull(parray, lower, parray[N-1], parray[0]);   
    
    sort(upper.begin(),upper.end(),comp); 
    sort(lower.begin(),lower.end(),comp);
    float t3 = clock();
    cout << "The convex hull is made up of the following points: " << endl;
 
    for (vector<point*>::iterator it = upper.begin(); it < upper.end(); it++){ 
        cout << (*it)->getX() << ", " << (*it)->getY() << endl;
    }
    for (vector<point*>::iterator it = lower.end()-1; it >= lower.begin(); it--){
        cout << (*it)->getX() << ", " << (*it)->getY() << endl;
    }
    cout << "Total time: " << (t3-t0)/CLOCKS_PER_SEC << " seconds" << endl;
    
 
  return 0;
}
