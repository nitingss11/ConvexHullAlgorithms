#include<iostream>
#include<algorithm>
#include<vector>
#include<math.h>
#include <stdlib.h> 
#include<string>
#include<fstream>
#include<time.h>

using namespace std;

class point
{
   private:
        int _x; 
        int _y;  
   
   public:
        point(int x, int y)
        { 
            _x = x;
            _y = y;
          }
        
        int getX()
        { 
            return _x;
         }
        
        int getY()
        {
            return _y;
         }
 };
 
 
void findPartialHull(vector<point*> &arr, vector<point*> &result, point* p1, point* pn){
  
  vector<point*> s1 = vector<point*>();  
   
  for (vector<point*>::iterator it = arr.begin(); it < arr.end(); it++){  
    if (determinant(p1,pn,*it) > 0)
      {   
            s1.push_back(*it);  
        }
      }
    
    if (s1.empty()){    
        result.push_back(p1);
    } else {   
       
        float maxDist = 0; 
        point *pmax;   
        float dist; 
        float length = sqrt(pow(p1->getX() - pn->getX(), 2) + pow(p1->getY() - pn->getY(), 2)); 
        for (vector<point*>::iterator it = s1.begin(); it < s1.end(); it++){
            dist = determinant(p1,pn,*it) / length; 
            if (dist > maxDist){   
                maxDist = dist;
                pmax = *it;
            }
        }
      
        vector<point*> s11 = vector<point*>(); 
        vector<point*> s12 = vector<point*>();  
        for (vector<point*>::iterator it = s1.begin(); it < s1.end(); it++){
           
            if (determinant(p1,pmax,*it) > 0){ 
                s11.push_back(*it);
            } else if (determinant(pmax,pn,*it) > 0){   
                s12.push_back(*it);
            }
        }
        findPartialHull(s11, result, p1, pmax); 
        findPartialHull(s12, result, pmax, pn); 
    }
}

int main()
 {
 
  return 0;
}
