#include <iostream>
#include <stdlib.h>
#include <stack>
#include<ctime>

using namespace std;

struct Point
{
        int x;
        int y;
};

Point p0;

Point nextToTop(stack<Point> &S)
{
    Point p = S.top();
    S.pop();
    Point res = S.top();
    S.push(p);
    return res;
}

void swap(Point &p1, Point &p2)
{
    Point temp = p1;
    p1 = p2;
    p2 = temp;
}

int dist(Point p1, Point p2)
{
    return (p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y);
}

int orientation(Point p, Point q, Point r)
{
    int val = (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
    if (val == 0)
        return 0; 
    return (val > 0) ? 1 : 2; 
}

int compare(const void *vp1, const void *vp2)
{
    Point *p1 = (Point *) vp1;
    Point *p2 = (Point *) vp2;
 
    int o = orientation(p0, *p1, *p2);
    if (o == 0)
        return (dist(p0, *p2) >= dist(p0, *p1)) ? -1 : 1;
 
    return (o == 2) ? -1 : 1;
}

void convexHull(Point points[], int n)
{
    int ymin = points[0].y;
    int min = 0;
   
    for (int i = 1; i < n; i++)
     {
        int y = points[i].y;
        if ((y < ymin) || (ymin == y && points[i].x < points[min].x))
          ymin = points[i].y, min = i;
      }
 
    swap(points[0], points[min]);
 
    p0 = points[0];
    qsort(&points[1], n - 1, sizeof(Point), compare);
 
    stack<Point> S;
    S.push(points[0]);
    S.push(points[1]);
    S.push(points[2]);
 
    for (int i = 3; i < n; i++)
    {
        while (orientation(nextToTop(S), S.top(), points[i]) != 2)
            S.pop();
        S.push(points[i]);
    }
 
    while (!S.empty())
    {
        Point p = S.top();
        cout << "(" << p.x << ", " << p.y << ")" << endl;
        S.pop();
    }
}


int main()
{  
    
    int N;
    cout << "Please enter the no. of points : "<<endl;
    cin>>N;
    Point *points = new Point[N];
    
    for(int i=0;i<N;i++)
      cin>>points[i].x>>points[i].y;
    
    cout << "The points in the Convex hull are: "<<endl;
    float t0 = clock();
    convexHull(points, N);
    float t1 = clock();
    cout << "Total time: " << (t1-t0)/CLOCKS_PER_SEC << " seconds" << endl; 
 return 0;
 }
